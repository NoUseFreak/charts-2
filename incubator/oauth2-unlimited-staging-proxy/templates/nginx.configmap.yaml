apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname_proxy" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  default.conf: |-
    resolver {{ .Values.kube_dns_hostname }} ipv6=off;
    upstream localhost_oauth2_proxy {
      least_conn;
      server 127.0.0.1:81;
    }

    server {
      listen       80;
      # was:
      #  server_name  localhost;

      # this should capture into $sub a hostname that matches pr123-some-service.<DNS_ZONE>
      server_name  ~^(?<pr_number>[Pp][Rr][0-9]+)-(?<service>[^.]+)\.{{ .Values.iap_hostname }}.{{ .Values.DNS_ZONE }};
      set $sub "$pr_number-$service";

      # TODO(tamsky): we still need to rewrite $sub -> <some-service>.pr123 for ultimate proxying

      access_log /dev/stdout;
      error_log /dev/stderr;

      # this location can only be used for internal requests
      # cf. http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
      location /oauth2/auth {
        internal;
        proxy_pass http://localhost_oauth2_proxy;
      }
                                                                    
      # initiate the oauth flow
      location /oauth2/start {
        auth_request off;
        proxy_pass http://localhost_oauth2_proxy;
      }

      # initiate the oauth flow
      location /oauth2/sign_in {
        auth_request off;
        rewrite_log on;
        if ($arg_initial = "true") {
            # rewrite ^(.*)([?&]initial=true)(.*)$ $1$3
            # proxy_pass
            proxy_pass http://localhost_oauth2_proxy/oauth2/sign_in?iap_redirect=$arg_iap_redirect;
            break;
        }
        # this is where the callback? oauth flow should wind up after authentiation
        if ($arg_iap_redirect) {
            rewrite ^.*$ $arg_iap_redirect? last;
            break;
        }
        proxy_pass http://localhost_oauth2_proxy/oauth2/sign_in?iap_redirect=$sub.{{ .Values.iap_hostname }}.{{ .Values.DNS_ZONE }}$request_uri;
      }

      location /oauth2/callback {
        auth_request off;
        proxy_pass http://localhost_oauth2_proxy;
      }
                                                        
      location / {
        auth_request /oauth2/auth;
        error_page 401 =307 $scheme://{{.Values.iap_hostname}}.{{ .Values.DNS_ZONE }}/oauth2/sign_in?initial=true&iap_redirect=$scheme://$sub.{{ .Values.iap_hostname }}.{{ .Values.DNS_ZONE }}$request_uri;

        # headers that are set in the auth_request
        auth_request_set $auth_user $upstream_http_x_authenticated_email;
        # headers that are set before proxy_pass
        proxy_set_header x-forwarded-user $auth_user;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $http_connection;

        # internal k8s namespace:
        proxy_pass       http://$service.$pr_number.svc.cluster.local.;
      }

      # TODO(tamsky): add 'location /logout {}'

      proxy_set_header      X-Real-IP                   $remote_addr;
      proxy_set_header      X-Forwarded-For             $proxy_add_x_forwarded_for;
      proxy_set_header      X-Upstream-Response-Time    $upstream_response_time;
      proxy_next_upstream   error                       http_500;
      proxy_set_header      Host                        $host;
    }
